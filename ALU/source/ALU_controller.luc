module alu_controller (
    input clk,
    input rst,
    input auto_button,
    input toggle,
    input start,
    input numbers[16],
    input next,
    output out[16],
    output test[5],
    output io_seg[8],
    output io_sel[4]
  ) {
  
  .clk(clk) 
  {
    .rst(rst) 
    {
      fsm fsm_controller = {MANUAL, AUTO, REALAUTO, ALUFN, A, B, ANSWER};
      fsm autostate = {INITIAL,ADDER1, ADDERTESTERROR, ADDERERROR, BOOL1, BOOLTESTERROR, 
                        BOOLERROR, COMP1, COMPTESTERROR, COMPERROR,
                        SHIF1, SHIFTESTERROR, SHIFERROR};
      multi_seven_seg seg;
      dff counter[30];
    }
    simple_ram ram1 (#SIZE(6), #DEPTH(1));
    simple_ram ram2 (#SIZE(16), #DEPTH(1));
    simple_ram ram3 (#SIZE(16), #DEPTH(1));
    simple_ram result (#SIZE(16), #DEPTH(1));
  }
  
  alu_unit alu;
  const X = 29;

  always {
  
    seg.values = {4d14, 4d14, 4d14, 4d14};
  
    ram1.address = 0;
    ram1.write_data = 6bx;
    ram1.write_en = 0;
    
    ram2.address = 0;
    ram2.write_data = 16bx;
    ram2.write_en = 0;
    
    ram3.address = 0;
    ram3.write_data = 16bx;
    ram3.write_en = 0;
    
    result.address = 0;
    result.write_data = 16bx;
    result.write_en = 0;
    
    alu.alufn = 16bx;
    alu.a = 16bx;
    alu.b = 16bx;
    
    test = 5b00001;
    out = 16b0;
    io_sel = ~4b1111;
    io_seg = ~8b00000000;
    
    case (fsm_controller.q) 
    {   
        fsm_controller.MANUAL:
            seg.values = {4d0, 4d1, 4d2, 4d3}; // display I d l e on the multi seg display
            io_seg = seg.seg;
            io_sel = ~seg.sel;
            if (toggle)  // if top button is pressed, we start the auto testing
              {
                fsm_controller.d = fsm_controller.AUTO;
              }
            if (start)  // if centre button is pressed, we start the manual testing 
              { 
                fsm_controller.d = fsm_controller.ALUFN;
              }
            
          fsm_controller.ALUFN:
            seg.values = {4d4, 4d2, 4d15, 4d8};  // display A L F N on the multi seg display
            io_seg = seg.seg;
            io_sel = ~seg.sel;
            ram1.write_data = numbers;
            ram1.write_en = 1;
            test = 5b00010;
          
            if (next)
              fsm_controller.d = fsm_controller.A;
            if (toggle)
                      fsm_controller.d = fsm_controller.MANUAL;
                    
                fsm_controller.A:
                  seg.values = {4d4, 4d14, 4d14, 4d14}; // display A on the multi seg display
                  io_seg = seg.seg;
                  io_sel = ~seg.sel;
                  ram2.write_data = numbers;
                  ram2.write_en = 1;
                  test = 5b00100;
          
                  if (next)
                    fsm_controller.d = fsm_controller.B;
                    
                fsm_controller.B:
                  seg.values = {4d7, 4d14, 4d14, 4d14}; // display B on the multi seg display
                  io_seg = seg.seg;
                  io_sel = ~seg.sel;
                  ram3.write_data = numbers;
                  ram3.write_en = 1;
                  test = 5b01000;
          
                  if (next)
                    fsm_controller.d = fsm_controller.ANSWER;
                    
                fsm_controller.ANSWER:
                  seg.values = {4d4, 4d8, 4d5, 4d14};
                  io_seg = seg.seg;
                  io_sel = ~seg.sel;
                  alu.alufn = ram1.read_data;
                  alu.a = ram2.read_data;
                  alu.b = ram3.read_data;
                  test = 5b10000;
                  out = alu.out;
                  if (next)
                    fsm_controller.d = fsm_controller.ALUFN;
                  if (toggle)
                      fsm_controller.d = fsm_controller.MANUAL;

      fsm_controller.AUTO:
      
        seg.values = {4d4, 4d6, 4d9, 4d14}; // display A U O on the multi seg display
        io_seg = seg.seg;
        io_sel = ~seg.sel;
            if (toggle)
            {
              fsm_controller.d = fsm_controller.MANUAL;
            }
            if (start) // if centre button pressed, we start the auto testing
            {  fsm_controller.d = fsm_controller.REALAUTO;
        }
        
      fsm_controller.REALAUTO:
      
        out = result.read_data;
        

              case(autostate.q)
               {
                  autostate.INITIAL:
                  seg.values = {4d0, 4d8, 4d0, 4d11};
                  io_seg = seg.seg;
                  io_sel = ~seg.sel;
                    counter.d = 0;
                  if (counter.q == 0)
                    autostate.d = autostate.ADDER1;
                    
            /*
              ADDER Test 1: 
                 a = 2, b = 1, ALUFN[0] = 0, 
                 Output should be 3
            */
            autostate.ADDER1:
                // display A d d on the multi seg display
                seg.values = {4d4, 4d1, 4d1, 4d14}; 
                io_seg = seg.seg;
                io_sel = ~seg.sel;
                
                // Pass alufn = 000000 into alu_unit, so that it will run the add operation
                alu.alufn = 6b000000; 
                
                // set the values of a and b and write the result to the ram
                alu.a = 16b10;
                alu.b = 16b1;  
                result.write_data = alu.out;
                result.write_en = 1; 
            
                counter.d = counter.q+1; //increase clock counter 
                
                if(counter.q[X]==1 && result.read_data==16b11){  // means it's correct!
                  counter.d =0;
                  autostate.d = autostate.BOOL1;
                }
                
                else if(counter.q[X]==1 && result.read_data!=16b11){ // checking mechanism
                  counter.d=0;
                  autostate.d=autostate.ADDERERROR;
                } 
              
              autostate.ADDERERROR:
                counter.d = counter.q+1;
                seg.values = {4d4, 4d1, 4d1, 4d3}; // display A d d E on the multi seg display
                io_seg = seg.seg;
                io_sel = ~seg.sel;
                if(counter.q[X]==1){
                  counter.d=0;
                  autostate.d = autostate.BOOL1;
                }
              
              //BOOLEAN Test 1 (Show "A"):, a = 3, b = 1, ALUFN[3:0] = 1010. Output = 3  
              autostate.BOOL1:
                seg.values = {4d7, 4d9, 4d9, 4d14};
                io_seg = seg.seg;
                io_sel = ~seg.sel;
                alu.alufn = 6b001010;
                alu.a = 16b00000011;
                alu.b = 16b00000001;
                result.write_data = alu.out;
                result.write_en = 1;
                //increase clock counter 
                counter.d = counter.q+1;
                
                if(counter.q[X]==1 && result.read_data==16b00000011){
                  counter.d =0;
                  autostate.d = autostate.BOOLTESTERROR;
                }
                
                else if(counter.q[X]==1 && result.read_data!=16b00000011){
                  counter.d=0;
                  autostate.d=autostate.BOOLERROR;
                }
                        
            
             autostate.BOOLTESTERROR:
                alu.alufn = 6b001010;
                alu.a = 16b00000011;
                alu.b = 16b00000001;
                result.write_data = alu.out-16b00000001;
                result.write_en = 1;
                counter.d = counter.q+1;
                
                if(counter.q[X]==1&&result.read_data==16b00000011){
                  counter.d =0;
                  autostate.d = autostate.COMP1;
                }
                
                else if(counter.q[X]==1&&result.read_data!=16b00000011){
                  counter.d =0;
                  autostate.d=autostate.BOOLERROR;
                }
              
              autostate.BOOLERROR:
                counter.d = counter.q+1;
                
                if(counter.q[X]==1){
                  counter.d=0;
                  autostate.d = autostate.COMP1;
                }
                
              //COMPARE Test 1:, a = 2, b = 2, ALUFN[2:1] = 01 Output = 1 (TRUE) 
              autostate.COMP1:
                seg.values = {4d12, 4d9, 4d13, 4d14}; // display c o p on multi seg display
                io_seg = seg.seg;
                io_sel = ~seg.sel;
            
                alu.alufn = 6b000010;
                alu.a = 16b00000010;
                alu.b = 16b00000010;
                result.write_data = alu.out;
                result.write_en = 1;
                //increase clock counter 
                counter.d = counter.q+1;
                
                if(counter.q[X]==1&&result.read_data==16b1){
                  counter.d =0;
                  autostate.d = autostate.COMPTESTERROR;
                }
                
                else if(counter.q[X]==1&&result.read_data!=16b1){
                  counter.d=0;
                  autostate.d=autostate.COMPERROR;
                }
                
            
             autostate.COMPTESTERROR:
                alu.alufn = 6b001010;
                alu.a = 16b00000010;
                alu.b = 16b00000010;
                result.write_data = 16b0;
                result.write_en = 1;
                counter.d = counter.q+1;
                
                if(counter.q[X]==1&&result.read_data==16b1){
                  counter.d =0;
                  autostate.d = autostate.SHIF1;
                }
                
                else if(counter.q[X]==1&&result.read_data!=16b1){
                  counter.d =0;
                  autostate.d=autostate.COMPERROR;
                }
              
              autostate.COMPERROR:
                counter.d = counter.q+1;
                
                if(counter.q[X]==1){
                  counter.d=0;
                  autostate.d = autostate.SHIF1;
                }
              autostate.SHIF1:
                seg.values = {4d5, 4d14, 4d14, 4d14}; // display S on multi seg display
                io_seg = seg.seg;
                io_sel = ~seg.sel;
            
                alu.alufn = 6b000000;
                alu.a = 16b00000011;
                alu.b = 16b00000010;
                result.write_data = alu.out;
                result.write_en = 1;
                //increase clock counter 
                counter.d = counter.q+1;
                
                if(counter.q[X]==1&&result.read_data==16b00001100){
                  counter.d =0;
                  autostate.d = autostate.SHIFTESTERROR;
                }
                
                else if(counter.q[X]==1&&result.read_data!=16b00001100){
                  counter.d=0;
                  autostate.d=autostate.SHIFERROR;
                }
                
            
             autostate.SHIFTESTERROR:
                alu.alufn = 6b001010;
                alu.a = 16b00000011;
                alu.b = 16b00000010;
                result.write_data = alu.out-8b00000001;
                result.write_en = 1;
                counter.d = counter.q+1;
                
                if(counter.q[X]==1&&result.read_data==16b00001100){
                  counter.d =0;
                  autostate.d = autostate.INITIAL;
                }
                
                else if(counter.q[X]==1&&result.read_data!=16b00001100){
                  counter.d =0;
                  autostate.d=autostate.SHIFERROR;
                }
              
              autostate.SHIFERROR:
                counter.d = counter.q+1;
                
                if(counter.q[X]==1){
                  counter.d=0;
                  autostate.d = autostate.INITIAL;
                }                  
               
            }
    } // case ending parenthesis          
  } // always ending parenthesis  
} // top module ending parenthesis

