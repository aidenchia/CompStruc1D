module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner start_button;
    edge_detector start_edge (#RISE(1), #FALL(0));
    
    button_conditioner toggle_button;
    edge_detector toggle_edge (#RISE(1), #FALL(0));
    
    button_conditioner next_button;
    edge_detector next_edge (#RISE(1), #FALL(0));
    
    button_conditioner auto_button;
    edge_detector auto_edge (#RISE(1), #FALL(0));
    
    .rst(rst) {
      alu_controller alu;
    }
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    io_seg = alu.io_seg;
    io_sel = alu.io_sel;
    
    start_button.in = io_button[1]; // centre button
    start_edge.in = start_button.out;
    
    toggle_button.in = io_button[0]; // top button
    toggle_edge.in = toggle_button.out;
    
    next_button.in = io_button[4];   // right button
    next_edge.in = next_button.out;
    
    auto_button.in = io_button[3];   // left button
    auto_edge.in = auto_button.out;
    
    alu.next = next_edge.out;
    alu.auto_button = auto_edge.out;
    alu.start = start_edge.out;
    alu.toggle = toggle_edge.out;
    alu.numbers[7:0] = io_dip[0];
    alu.numbers[15:8] = io_dip[1];
    io_led[0] = alu.out[7:0];
    io_led[1] = alu.out[15:8];
  }
}