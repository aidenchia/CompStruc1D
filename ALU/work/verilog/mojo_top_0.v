/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_start_button_out;
  reg [1-1:0] M_start_button_in;
  button_conditioner_2 start_button (
    .clk(clk),
    .in(M_start_button_in),
    .out(M_start_button_out)
  );
  wire [1-1:0] M_start_edge_out;
  reg [1-1:0] M_start_edge_in;
  edge_detector_3 start_edge (
    .clk(clk),
    .in(M_start_edge_in),
    .out(M_start_edge_out)
  );
  wire [1-1:0] M_toggle_button_out;
  reg [1-1:0] M_toggle_button_in;
  button_conditioner_2 toggle_button (
    .clk(clk),
    .in(M_toggle_button_in),
    .out(M_toggle_button_out)
  );
  wire [1-1:0] M_toggle_edge_out;
  reg [1-1:0] M_toggle_edge_in;
  edge_detector_3 toggle_edge (
    .clk(clk),
    .in(M_toggle_edge_in),
    .out(M_toggle_edge_out)
  );
  wire [1-1:0] M_next_button_out;
  reg [1-1:0] M_next_button_in;
  button_conditioner_2 next_button (
    .clk(clk),
    .in(M_next_button_in),
    .out(M_next_button_out)
  );
  wire [1-1:0] M_next_edge_out;
  reg [1-1:0] M_next_edge_in;
  edge_detector_3 next_edge (
    .clk(clk),
    .in(M_next_edge_in),
    .out(M_next_edge_out)
  );
  wire [1-1:0] M_auto_button_out;
  reg [1-1:0] M_auto_button_in;
  button_conditioner_2 auto_button (
    .clk(clk),
    .in(M_auto_button_in),
    .out(M_auto_button_out)
  );
  wire [1-1:0] M_auto_edge_out;
  reg [1-1:0] M_auto_edge_in;
  edge_detector_3 auto_edge (
    .clk(clk),
    .in(M_auto_edge_in),
    .out(M_auto_edge_out)
  );
  wire [16-1:0] M_alu_out;
  wire [5-1:0] M_alu_test;
  wire [8-1:0] M_alu_io_seg;
  wire [4-1:0] M_alu_io_sel;
  reg [1-1:0] M_alu_auto_button;
  reg [1-1:0] M_alu_toggle;
  reg [1-1:0] M_alu_start;
  reg [16-1:0] M_alu_numbers;
  reg [1-1:0] M_alu_next;
  alu_controller_10 alu (
    .clk(clk),
    .rst(rst),
    .auto_button(M_alu_auto_button),
    .toggle(M_alu_toggle),
    .start(M_alu_start),
    .numbers(M_alu_numbers),
    .next(M_alu_next),
    .out(M_alu_out),
    .test(M_alu_test),
    .io_seg(M_alu_io_seg),
    .io_sel(M_alu_io_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_seg = M_alu_io_seg;
    io_sel = M_alu_io_sel;
    M_start_button_in = io_button[1+0-:1];
    M_start_edge_in = M_start_button_out;
    M_toggle_button_in = io_button[0+0-:1];
    M_toggle_edge_in = M_toggle_button_out;
    M_next_button_in = io_button[4+0-:1];
    M_next_edge_in = M_next_button_out;
    M_auto_button_in = io_button[3+0-:1];
    M_auto_edge_in = M_auto_button_out;
    M_alu_next = M_next_edge_out;
    M_alu_auto_button = M_auto_edge_out;
    M_alu_start = M_start_edge_out;
    M_alu_toggle = M_toggle_edge_out;
    M_alu_numbers[0+7-:8] = io_dip[0+7-:8];
    M_alu_numbers[8+7-:8] = io_dip[8+7-:8];
    io_led[0+7-:8] = M_alu_out[0+7-:8];
    io_led[8+7-:8] = M_alu_out[8+7-:8];
    io_led[16+7-:8] = M_alu_test;
  end
endmodule
